
server {
  listen              80;
  server_name "~^(www\.)?(.*)$" ;
  return 301 https://$2$request_uri ;
}
server {
  listen 443 ssl http2;
  server_name "~^(www\.)?(.*)$" ;
  server_tokens off;
  ssl_certificate /etc/letsencrypt/live/heisen.me/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/heisen.me/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/heisen.me/chain.pem;
  ssl_protocols TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;
  add_header Strict-Transport-Security max-age=15768000;
  ssl_stapling on;
  ssl_stapling_verify on;
  return 301 https://$2$request_uri ;
}

  proxy_cache_path /var/lib/nginx/cache levels=1:2 keys_zone=backcache:8m max_size=500m;
  proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
  proxy_cache_valid 200 302 10m;
  proxy_cache_valid 404 1m;

  server {
      ##enabling gzip
      gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

      ## Block SQL injections
      set $block_sql_injections 0;
      if ($query_string ~ "union.*select.*\(") {
         set $block_sql_injections 1;
      }
      if ($query_string ~ "union.*all.*select.*") {
         set $block_sql_injections 1;
      }
      if ($query_string ~ "concat.*\(") {
         set $block_sql_injections 1;
      }
      if ($block_sql_injections = 1) {
         return 403;
      }

      ## Block file injections
      set $block_file_injections 0;
      if ($query_string ~ "[a-zA-Z0-9_]=http://") {
         set $block_file_injections 1;
      }
      if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {
         set $block_file_injections 1;
      }
      if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
         set $block_file_injections 1;
      }
      if ($block_file_injections = 1) {
         return 403;
      }

      ## Block common exploits
      set $block_common_exploits 0;
      if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
         set $block_common_exploits 1;
      }
      if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
         set $block_common_exploits 1;
      }
      if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
         set $block_common_exploits 1;
      }
      if ($query_string ~ "proc/self/environ") {
         set $block_common_exploits 1;
      }
      if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
         set $block_common_exploits 1;
      }
      if ($query_string ~ "base64_(en|de)code\(.*\)") {
         set $block_common_exploits 1;
      }
      if ($block_common_exploits = 1) {
         return 403;
      }

      ## Block spam
      set $block_spam 0;
      if ($query_string ~ "\b(ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)\b") {
         set $block_spam 1;
      }
      if ($query_string ~ "\b(erections|hoodia|huronriveracres|impotence|levitra|libido)\b") {
         set $block_spam 1;
      }
      if ($query_string ~ "\b(ambien|blue\spill|cialis|cocaine|ejaculation|erectile)\b") {
         set $block_spam 1;
      }
      if ($query_string ~ "\b(lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby)\b") {
         set $block_spam 1;
      }
      if ($block_spam = 1) {
         return 403;
      }

      ## Block user agents
      set $block_user_agents 0;

      # Don't disable wget if you need it to run cron jobs!
      #if ($http_user_agent ~ "Wget") {
      #    set $block_user_agents 1;
      #}

      # Disable Akeeba Remote Control 2.5 and earlier
      if ($http_user_agent ~ "Indy Library") {
         set $block_user_agents 1;
      }

      # Common bandwidth hoggers and hacking tools.
      if ($http_user_agent ~ "libwww-perl") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "GetRight") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "GetWeb!") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "Go!Zilla") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "Download Demon") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "Go-Ahead-Got-It") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "TurnitinBot") {
         set $block_user_agents 1;
      }
      if ($http_user_agent ~ "GrabNet") {
         set $block_user_agents 1;
      }

      if ($block_user_agents = 1) {
         return 403;
      }

      listen 443 ssl http2;
      listen [::]:443 ssl http2;
      server_name heisen.me;
      server_tokens off;
      # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
      ssl_certificate /etc/letsencrypt/live/heisen.me/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/heisen.me/privkey.pem;
      ssl_trusted_certificate /etc/letsencrypt/live/heisen.me/chain.pem;

      # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
      #ssl_dhparam /path/to/dhparam.pem;

      # modern configuration. tweak to your needs.
      ssl_protocols TLSv1.2;
      ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
      ssl_prefer_server_ciphers on;

      # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
      add_header Strict-Transport-Security max-age=15768000;

      # OCSP Stapling ---
      # fetch OCSP records from URL in ssl_certificate and cache them
      ssl_stapling on;
      ssl_stapling_verify on;

      ## verify chain of trust of OCSP response using Root CA and Intermediate certs
      #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

      #resolver <IP DNS resolver>;

      access_log  /var/log/nginx/heisen.log;

      location /static/ {
          root /code/;
          add_header Cache-Control "max-age=31557600,  public";
      }

      location / {
          proxy_cache backcache;
          proxy_pass http://127.0.0.1:5000;
          proxy_cache_bypass $http_cache_control;
          add_header X-Proxy-Cache $upstream_cache_status;
      }
  }
